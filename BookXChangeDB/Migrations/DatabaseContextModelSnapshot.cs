// <auto-generated />
using System;
using BookXChangeDB.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookXChangeDB.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BookXChangeDB.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Author 1",
                            CategoryId = 1,
                            DateCreated = new DateTime(2024, 3, 5, 7, 36, 7, 728, DateTimeKind.Utc).AddTicks(7583),
                            Title = "Book 1"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Author 2",
                            CategoryId = 1,
                            DateCreated = new DateTime(2024, 3, 5, 7, 36, 7, 728, DateTimeKind.Utc).AddTicks(8456),
                            Title = "Book 2"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Author 3",
                            CategoryId = 2,
                            DateCreated = new DateTime(2024, 3, 5, 7, 36, 7, 728, DateTimeKind.Utc).AddTicks(8459),
                            Title = "Book 3"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Author 4",
                            CategoryId = 2,
                            DateCreated = new DateTime(2024, 3, 5, 7, 36, 7, 728, DateTimeKind.Utc).AddTicks(8460),
                            Title = "Book 4"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Author 5",
                            CategoryId = 3,
                            DateCreated = new DateTime(2024, 3, 5, 7, 36, 7, 728, DateTimeKind.Utc).AddTicks(8461),
                            Title = "Book 5"
                        });
                });

            modelBuilder.Entity("BookXChangeDB.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Science Fiction"
                        });
                });

            modelBuilder.Entity("BookXChangeDB.Models.Book", b =>
                {
                    b.HasOne("BookXChangeDB.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookXChangeDB.Models.Category", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
